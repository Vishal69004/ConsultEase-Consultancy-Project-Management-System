const sheetName = 'Sheet1';
const scriptProp = PropertiesService.getScriptProperties();

function initialSetup() {
  const activeSpreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  scriptProp.setProperty('key', activeSpreadsheet.getId());
}

function deleteLoginByEmail(e) {
  const lock = LockService.getScriptLock();
  lock.tryLock(10000);
  try {
    const doc = SpreadsheetApp.openById(scriptProp.getProperty('key'));
    const sheet = doc.getSheetByName(sheetName);
    const data = sheet.getDataRange().getValues();
    const email = e.parameter.email;
    if (!email) {
      return ContentService.createTextOutput(JSON.stringify({
        result: 'error',
        error: 'Missing email parameter'
      })).setMimeType(ContentService.MimeType.JSON);
    }
    let rowToDelete = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] === email) { // Assuming Email is in column 1 (index 0)
        rowToDelete = i + 1; // Spreadsheet rows are 1-indexed
        break;
      }
    }
    if (rowToDelete === -1) {
      return ContentService.createTextOutput(JSON.stringify({
        result: 'error',
        error: 'Email not found'
      })).setMimeType(ContentService.MimeType.JSON);
    }
    sheet.deleteRow(rowToDelete);
    return ContentService.createTextOutput(JSON.stringify({
      result: 'success',
      deletedEmail: email
    })).setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    return ContentService.createTextOutput(JSON.stringify({
      result: 'error',
      error: error.message
    })).setMimeType(ContentService.MimeType.JSON);
  } finally {
    lock.releaseLock();
  }
}

function doPost(e) {
  const lock = LockService.getScriptLock();
  lock.tryLock(10000);
  if (e.parameter.action === 'deleteLoginByEmail') {
    return deleteLoginByEmail(e);
  }
  try {
    const doc = SpreadsheetApp.openById(scriptProp.getProperty('key'));
    const sheet = doc.getSheetByName(sheetName);
    if (!sheet) {
      return ContentService.createTextOutput(JSON.stringify({
        result: 'error',
        error: 'Sheet not found!'
      })).setMimeType(ContentService.MimeType.JSON);
    }
    const nextRow = sheet.getLastRow() + 1;
    const email = e.parameter['Email'] || "";
    const password = e.parameter['Password'] || "";
    if (!email || !password) {
      return ContentService.createTextOutput(JSON.stringify({
        result: 'error',
        error: 'Missing email or password'
      })).setMimeType(ContentService.MimeType.JSON);
    }
    sheet.getRange(nextRow, 1, 1, 2).setValues([[email, password]]);
    return ContentService.createTextOutput(JSON.stringify({
      result: 'success'
    })).setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    return ContentService.createTextOutput(JSON.stringify({
      result: 'error',
      error: error.message
    })).setMimeType(ContentService.MimeType.JSON);
  } finally {
    lock.releaseLock();
  }
}

function doGet(e) {
  const doc = SpreadsheetApp.openById(scriptProp.getProperty('key'));
  const sheet = doc.getSheetByName(sheetName);
  if (!sheet) {
    return ContentService.createTextOutput(JSON.stringify({
      result: 'error',
      error: 'Sheet not found!'
    })).setMimeType(ContentService.MimeType.JSON);
  }
  const data = sheet.getDataRange().getValues();
  if (data.length <= 1) { // Only header present, no user data
    return ContentService.createTextOutput(JSON.stringify({
      result: 'success',
      data: []
    })).setMimeType(ContentService.MimeType.JSON);
  }
  // Convert data into an array of objects
  const headers = data[0];
  const users = data.slice(1).map(row => ({
    Email: row[0], // Assuming Email is in the first column
    Password: row[1] // Assuming Password is in the second column
  }));
  return ContentService.createTextOutput(JSON.stringify({
    result: 'success',
    data: users
  })).setMimeType(ContentService.MimeType.JSON);
}
